public static void CancelTickets()
{
    Console.Write("Enter your username: ");
    string username = Console.ReadLine();

    Console.Write("Enter your password: ");
    string password = Console.ReadLine();

    int userID = Trains.GetUserID(username, password);

    if (userID == 0)
    {
        Console.WriteLine("User not found.");
        return;
    }

    Console.Write("Enter BookingID to cancel: ");
    int bookingID = Convert.ToInt32(Console.ReadLine());

    using (var conn = Trains.GetConnection())
    {
        conn.Open();

        using (var cmd = new SqlCommand("SELECT TrainID, NumberOfSeats FROM Booking WHERE BookingID = @BookingID AND Status = 'Confirmed' AND UserID = @UserID", conn))
        {
            cmd.Parameters.AddWithValue("@BookingID", bookingID);
            cmd.Parameters.AddWithValue("@UserID", userID);
            using (var reader = cmd.ExecuteReader())
            {
                if (!reader.Read())
                {
                    Console.WriteLine("Booking not found or already cancelled.");
                    return;
                }

                int trainID = (int)reader["TrainID"];
                int bookedSeats = (int)reader["NumberOfSeats"];
                reader.Close();

                Console.Write("Enter number of seats to cancel: ");
                int seatsToCancel = Convert.ToInt32(Console.ReadLine());

                if (seatsToCancel <= 0 || seatsToCancel > bookedSeats)
                {
                    Console.WriteLine("Invalid number of seats.");
                    return;
                }

                using (var transaction = conn.BeginTransaction())
                {
                    try
                    {
                        using (var updateBookingCmd = new SqlCommand("UPDATE Booking SET NumberOfSeats = NumberOfSeats - @SeatsToCancel WHERE BookingID = @BookingID AND UserID = @UserID", conn, transaction))
                        {
                            updateBookingCmd.Parameters.AddWithValue("@SeatsToCancel", seatsToCancel);
                            updateBookingCmd.Parameters.AddWithValue("@BookingID", bookingID);
                            updateBookingCmd.Parameters.AddWithValue("@UserID", userID);
                            int rowsAffected = updateBookingCmd.ExecuteNonQuery();

                            if (rowsAffected == 0)
                            {
                                throw new Exception("Failed to update booking.");
                            }

                            using (var updateSeatsCmd = new SqlCommand("UPDATE Trains SET NoOfSeats = NoOfSeats + @SeatsToCancel WHERE TrainID = @TrainID", conn, transaction))
                            {
                                updateSeatsCmd.Parameters.AddWithValue("@SeatsToCancel", seatsToCancel);
                                updateSeatsCmd.Parameters.AddWithValue("@TrainID", trainID);
                                updateSeatsCmd.ExecuteNonQuery();
                            }

                            transaction.Commit();
                            Console.WriteLine("Partial cancellation successful.");
                        }
                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        Console.WriteLine($"Error: {ex.Message}");
                    }
                }
            }
        }
    }
}
