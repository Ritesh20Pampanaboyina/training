using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace ALMSystem2.Controllers
{
    public class AdminController : Controller
    {
        // GET: Admin/Login
        public ActionResult AdminLogin()
        {
            return View();
        }

        // POST: Admin/Login
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AdminLogin(string username, string password)
        {
            if (username == "admin" && password == "password") // Example validation
            {
                return RedirectToAction("AdminDashboard");
            }

            ModelState.AddModelError("", "Invalid login attempt.");
            return View();
        }

        // GET: Admin/Dashboard
        public ActionResult AdminDashboard()
        {
            return View();
        }

        // GET: Admin/EmployeeDetails
        public ActionResult EmployeeDetails()
        {
            var employees = new List<object>
            {
                new { EmployeeID = 1, EmployeeName = "John Doe", Email = "johndoe@example.com", Phone = "123-456-7890", HireDate = DateTime.Now.AddYears(-5), RoleID = 1, ManagerID = 2, ProjectID = 1, LeaveBalance = 10, No_of_leave = 5, Emp_status = "Active" }
                // Add more employees as necessary
            };

            ViewBag.Employees = employees; // Pass data to view
            return View();
        }

        // GET: Admin/CreateNewEmployee
        public ActionResult CreateNewEmployee()
        {
            return View();
        }

        // POST: Admin/CreateNewEmployee
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateNewEmployee(FormCollection form)
        {
            // Extract form values
            string employeeName = form["EmployeeName"];
            string email = form["Email"];
            string phone = form["Phone"];
            DateTime hireDate = Convert.ToDateTime(form["HireDate"]);
            int roleID = Convert.ToInt32(form["RoleID"]);
            int managerID = Convert.ToInt32(form["ManagerID"]);
            int projectID = Convert.ToInt32(form["ProjectID"]);
            int leaveBalance = Convert.ToInt32(form["LeaveBalance"]);
            int no_of_leave = Convert.ToInt32(form["No_of_leave"]);
            string emp_status = form["Emp_status"];

            // Add the new employee to the database (replace with actual data insertion logic)
            // Example: db.AddEmployee(employeeName, email, phone, hireDate, roleID, managerID, projectID, leaveBalance, no_of_leave, emp_status);

            return RedirectToAction("EmployeeDetails");
        }

        // GET: Admin/EditEmployee/1
        public ActionResult EditEmployee(int id)
        {
            // Fetch the employee from the database using the id (replace with actual data retrieval logic)
            var employee = new
            {
                EmployeeID = id,
                EmployeeName = "John Doe",
                Email = "johndoe@example.com",
                Phone = "123-456-7890",
                HireDate = DateTime.Now.AddYears(-5),
                RoleID = 1,
                ManagerID = 2,
                ProjectID = 1,
                LeaveBalance = 10,
                No_of_leave = 5,
                Emp_status = "Active"
            };

            // Pass the data to the view
            ViewBag.Employee = employee;
            return View();
        }

        // POST: Admin/EditEmployee/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditEmployee(int id, FormCollection form)
        {
            // Extract form values (replace with actual logic)
            string employeeName = form["EmployeeName"];
            string email = form["Email"];
            string phone = form["Phone"];
            DateTime hireDate = Convert.ToDateTime(form["HireDate"]);
            int roleID = Convert.ToInt32(form["RoleID"]);
            int managerID = Convert.ToInt32(form["ManagerID"]);
            int projectID = Convert.ToInt32(form["ProjectID"]);
            int leaveBalance = Convert.ToInt32(form["LeaveBalance"]);
            int no_of_leave = Convert.ToInt32(form["No_of_leave"]);
            string emp_status = form["Emp_status"];

            // Update employee in the database (replace with actual data update logic)

            return RedirectToAction("EmployeeDetails");
        }

        // POST: Admin/DeleteEmployee/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteEmployee(int id)
        {
            // Simulate delete logic here (replace with actual delete logic)

            return RedirectToAction("EmployeeDetails");
        }

        // GET: Admin/ProjectDetails
        public ActionResult ProjectDetails()
        {
            var projects = new List<object>
            {
                new { ProjectID = 1, ProjectName = "Project Alpha", StartDate = DateTime.Now.AddMonths(-6), EndDate = DateTime.Now.AddMonths(6), Status = "Active" }
                // Add more projects as necessary
            };

            ViewBag.Projects = projects; // Pass data to view
            return View();
        }

        // GET: Admin/CreateNewProject
        public ActionResult CreateNewProject()
        {
            return View();
        }

        // POST: Admin/CreateNewProject
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateNewProject(FormCollection form)
        {
            // Extract form values
            string projectName = form["ProjectName"];
            DateTime startDate = Convert.ToDateTime(form["StartDate"]);
            DateTime endDate = Convert.ToDateTime(form["EndDate"]);
            string status = form["Status"];

            // Add the new project to the database (replace with actual data insertion logic)
            // Example: db.AddProject(projectName, startDate, endDate, status);

            return RedirectToAction("ProjectDetails");
        }

        // GET: Admin/EditProject/1
        public ActionResult EditProject(int id)
        {
            // Fetch the project from the database using the id (replace with actual data retrieval logic)
            var project = new
            {
                ProjectID = id,
                ProjectName = "Project Alpha",
                StartDate = DateTime.Now.AddMonths(-6),
                EndDate = DateTime.Now.AddMonths(6),
                Status = "Active"
            };

            // Pass the data to the view
            ViewBag.Project = project;
            return View();
        }

        // POST: Admin/EditProject/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditProject(int id, FormCollection form)
        {
            // Extract form values (replace with actual logic)
            string projectName = form["ProjectName"];
            DateTime startDate = Convert.ToDateTime(form["StartDate"]);
            DateTime endDate = Convert.ToDateTime(form["EndDate"]);
            string status = form["Status"];

            // Update project in the database (replace with actual data update logic)

            return RedirectToAction("ProjectDetails");
        }

        // POST: Admin/DeleteProject/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteProject(int id)
        {
            // Simulate delete logic here (replace with actual delete logic)

            return RedirectToAction("ProjectDetails");
        }

        // GET: Admin/AttendanceRequests
        public ActionResult AttendanceRequests()
        {
            var attendanceRequests = new List<object>
            {
                new { EmployeeName = "John Doe", Date = "2024-08-20", Status = "Pending" },
                new { EmployeeName = "Jane Smith", Date = "2024-08-21", Status = "Pending" }
            };

            ViewBag.AttendanceRequests = attendanceRequests; // Pass data to view
            return View();
        }

        // POST: Admin/ApproveAttendanceRequest/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ApproveAttendanceRequest(int id)
        {
            // Logic to approve the attendance request
            TempData["Message"] = "Attendance request approved.";
            return RedirectToAction("AttendanceRequests");
        }

        // POST: Admin/RejectAttendanceRequest/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RejectAttendanceRequest(int id)
        {
            // Logic to reject the attendance request
            TempData["Message"] = "Attendance request rejected.";
            return RedirectToAction("AttendanceRequests");
        }

        // GET: Admin/LeaveRequests
        public ActionResult LeaveRequests()
        {
            var leaveRequests = new List<object>
            {
                new { EmployeeName = "Michael Brown", LeaveType = "Sick Leave", StartDate = "2024-08-20", EndDate = "2024-08-22", Status = "Pending" },
                new { EmployeeName = "Emily Davis", LeaveType = "Annual Leave", StartDate = "2024-08-25", EndDate = "2024-08-30", Status = "Pending" }
            };

            ViewBag.LeaveRequests = leaveRequests; // Pass data to view
            return View();
        }

        // POST: Admin/ApproveLeaveRequest/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ApproveLeaveRequest(int id)
        {
            // Logic to approve the leave request
            TempData["Message"] = "Leave request approved.";
            return RedirectToAction("LeaveRequests");
        }

        // POST: Admin/RejectLeaveRequest/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RejectLeaveRequest(int id)
        {
            // Logic to reject the leave request
            TempData["Message"] = "Leave request rejected.";
            return RedirectToAction("LeaveRequests");
        }
    }
}




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #000;
            color: #ecf0f1;
            margin: 0;
            padding: 0;
        }

        .navbar {
            background-color: rgba(0, 0, 0, 0.8);
            transition: background-color 0.3s ease-in-out;
        }

            .navbar:hover {
                background-color: rgba(0, 0, 0, 0.9);
            }

        .navbar-brand {
            font-size: 1.8em;
            color: #ffffff !important;
        }

        .sidebar {
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.9);
            padding-top: 30px;
            position: fixed;
            top: 0;
            left: 0;
            width: 250px;
            transition: width 0.3s ease-in-out;
            overflow: hidden;
            overflow-y: auto;
        }

            .sidebar:hover {
                width: 280px;
            }

            .sidebar a {
                color: #ffffff;
                display: block;
                padding: 20px;
                text-decoration: none;
                font-size: 1.2em;
                transition: background-color 0.3s, padding-left 0.3s;
                border-left: 4px solid transparent;
            }

                .sidebar a:hover {
                    background-color: rgba(255, 255, 255, 0.1);
                    padding-left: 25px;
                    border-left: 4px solid #16a085;
                }

            .sidebar .active {
                background-color: #16a085;
                border-left: 4px solid #1abc9c;
            }

        .content {
            margin-left: 270px;
            padding: 30px;
            color: #ecf0f1;
        }

        .card {
            margin-bottom: 30px;
            border: none;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
            background-color: rgba(255, 255, 255, 0.1);
            color: #ecf0f1;
            transition: transform 0.3s ease-in-out, background-color 0.3s, box-shadow 0.3s;
        }

            .card:hover {
                transform: scale(1.05);
                background-color: rgba(255, 255, 255, 0.2);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            }

        .card-title {
            font-size: 1.8em;
        }

        .card-text {
            font-size: 1.2em;
        }

        .btn {
            font-size: 1.2em;
            padding: 0.75em 1.5em;
        }

        .welcome-box {
            background-color: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
        }

            .welcome-box h3 {
                font-size: 2em;
                margin-bottom: 10px;
            }

            .welcome-box p {
                font-size: 1.2em;
            }
    </style>
</head>
<body>
    <div class="sidebar">
        <a href="#" class="active">Dashboard</a>
        <a href="@Url.Action("EmployeeDetails", "Admin")">Manage Employees</a>
        <a href="@Url.Action("ProjectDetails", "Admin")">Manage Projects</a>
        <a href="@Url.Action("AttendanceRequests", "Admin")">Attendance Requests</a>
        <a href="@Url.Action("LeaveRequests", "Admin")">Leave Requests</a>
    </div>

    <div class="content">
        <div class="welcome-box">
            <h3>Welcome to the Admin Dashboard</h3>
            <p>Use the sidebar to navigate through different sections of the admin panel.</p>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Manage Employees</h5>
                <p class="card-text">Add, update, or delete employee information and manage their roles.</p>
                <a href="@Url.Action("EmployeeDetails", "Admin")" class="btn btn-primary">Manage Employees</a>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Manage Projects</h5>
                <p class="card-text">Add, update, or delete project information and assign projects to employees.</p>
                <a href="@Url.Action("ProjectDetails", "Admin")" class="btn btn-primary">Manage Projects</a>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Attendance Requests</h5>
                <p class="card-text">View and manage pending attendance requests.</p>
                <a href="@Url.Action("AttendanceRequests", "Admin")" class="btn btn-primary">View Requests</a>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Leave Requests</h5>
                <p class="card-text">View and manage pending leave requests.</p>
                <a href="@Url.Action("LeaveRequests", "Admin")" class="btn btn-primary">View Requests</a>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
</body>
</html>



@{
    Layout = null; // or set to your layout file if you have one
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Login</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            background: linear-gradient(to right, #6a11cb, #2575fc);
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
        }

        .login-container {
            background: #fff;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 400px;
            transform: translateY(0);
            opacity: 1;
            transition: transform 0.5s ease-out, opacity 0.5s ease-out;
        }

            .login-container.hidden {
                transform: translateY(-50%);
                opacity: 0;
            }

            .login-container h2 {
                margin-bottom: 1rem;
                font-family: 'Arial', sans-serif;
                color: #333;
            }

        .form-control {
            border-radius: 5px;
            border: 1px solid #ddd;
            transition: border-color 0.3s;
        }

            .form-control:focus {
                border-color: #2575fc;
                box-shadow: 0 0 5px rgba(37, 117, 252, 0.5);
            }

        .btn-primary {
            background: #2575fc;
            border: none;
            border-radius: 5px;
            padding: 0.75rem 1.5rem;
            font-size: 1.5rem;
            transition: background 0.3s, transform 0.3s;
        }

            .btn-primary:hover {
                background: #1d64d1;
            }

            .btn-primary:active {
                transform: scale(0.98);
            }
      
    </style>
</head>
<body>
    <div class="login-container">
        <h2>Admin Login</h2>
        @using (Html.BeginForm("AdminLogin", "Admin", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <div class="form-group">
                @Html.Label("username")
                @Html.TextBox("username", null, new { @class = "form-control", required = "required" })
            </div>
            <div class="form-group">
                @Html.Label("password")
                @Html.Password("password", null, new { @class = "form-control", required = "required" })
            </div>
            <button type="submit" class="btn btn-primary">Login</button>
        }
    </div>
</body>
</html>
