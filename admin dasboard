using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace ALMSystem2.Controllers
{
    public class AdminController : Controller
    {
        // GET: Admin/Login
        public ActionResult AdminLogin()
        {
            return View();
        }

        // POST: Admin/Login
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AdminLogin(string username, string password)
        {
            if (username == "admin" && password == "password") // Example validation
            {
                // Set session variable to indicate that the admin is logged in
                Session["IsAdminLoggedIn"] = true;
                return RedirectToAction("AdminDashboard");
            }

            ModelState.AddModelError("", "Invalid login attempt.");
            return View();
        }

        // GET: Admin/Dashboard
        [AuthorizeAdmin]
        public ActionResult AdminDashboard()
        {
            return View();
        }

        // The rest of the actions remain the same

        // GET: Admin/EmployeeDetails
        [AuthorizeAdmin]
        public ActionResult EmployeeDetails()
        {
            var employees = new List<object>
            {
                new { EmployeeID = 1, EmployeeName = "John Doe", Email = "johndoe@example.com", Phone = "123-456-7890", HireDate = DateTime.Now.AddYears(-5), RoleID = 1, ManagerID = 2, ProjectID = 1, LeaveBalance = 10, No_of_leave = 5, Emp_status = "Active" }
                // Add more employees as necessary
            };

            ViewBag.Employees = employees; // Pass data to view
            return View();
        }

        // Other actions (EditEmployee, DeleteEmployee, etc.) should also be protected with [AuthorizeAdmin]
    }

    public class AuthorizeAdminAttribute : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            var session = filterContext.HttpContext.Session;
            if (session["IsAdminLoggedIn"] == null || !(bool)session["IsAdminLoggedIn"])
            {
                filterContext.Result = new RedirectResult("~/Admin/AdminLogin");
            }
            base.OnActionExecuting(filterContext);
        }
    }
}



using System.Web;
using System.Web.Mvc;

namespace ALMSystem2.Filters
{
    public class AuthorizeAdminAttribute : ActionFilterAttribute
    {
        public override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            if (filterContext.HttpContext.Session["AdminLoggedIn"] == null)
            {
                filterContext.Result = new RedirectToRouteResult(
                    new System.Web.Routing.RouteValueDictionary
                    {
                        { "controller", "Admin" },
                        { "action", "AdminLogin" }
                    });
            }
            base.OnActionExecuting(filterContext);
        }
    }
}


<system.web>
    <sessionState mode="InProc" timeout="20" />
</system.web>






