using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using YourNamespace.Models; // Adjust this based on your namespace
using YourNamespace.Data; // Adjust this based on your namespace

public class AdminController : Controller
{
    private readonly ApplicationDbContext _context; // Your DbContext class

    public AdminController(ApplicationDbContext context)
    {
        _context = context;
    }

    // Project Methods
    public IActionResult ProjectDetails()
    {
        var projects = _context.Projects.ToList();
        return View(projects);
    }

    public IActionResult CreateNewProject()
    {
        return View();
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> CreateNewProject(Project model)
    {
        if (ModelState.IsValid)
        {
            _context.Projects.Add(model);
            await _context.SaveChangesAsync();
            TempData["Message"] = "Project created successfully!";
            return RedirectToAction("ProjectDetails");
        }
        return View(model);
    }

    public IActionResult EditProject(int id)
    {
        var project = _context.Projects.Find(id);
        if (project == null)
        {
            return NotFound();
        }
        return View(project);
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> EditProject(Project model)
    {
        if (ModelState.IsValid)
        {
            _context.Projects.Update(model);
            await _context.SaveChangesAsync();
            TempData["Message"] = "Project updated successfully!";
            return RedirectToAction("ProjectDetails");
        }
        return View(model);
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> DeleteProject(int id)
    {
        var project = _context.Projects.Find(id);
        if (project != null)
        {
            _context.Projects.Remove(project);
            await _context.SaveChangesAsync();
            TempData["Message"] = "Project deleted successfully!";
        }
        return RedirectToAction("ProjectDetails");
    }

    // Employee Methods
    public IActionResult EmployeeDetails()
    {
        var employees = _context.Employees.ToList();
        return View(employees);
    }

    public IActionResult CreateNewEmployee()
    {
        return View();
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> CreateNewEmployee(Employee model)
    {
        if (ModelState.IsValid)
        {
            _context.Employees.Add(model);
            await _context.SaveChangesAsync();
            TempData["Message"] = "Employee created successfully!";
            return RedirectToAction("EmployeeDetails");
        }
        return View(model);
    }

    public IActionResult EditEmployee(int id)
    {
        var employee = _context.Employees.Find(id);
        if (employee == null)
        {
            return NotFound();
        }
        return View(employee);
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> EditEmployee(Employee model)
    {
        if (ModelState.IsValid)
        {
            _context.Employees.Update(model);
            await _context.SaveChangesAsync();
            TempData["Message"] = "Employee updated successfully!";
            return RedirectToAction("EmployeeDetails");
        }
        return View(model);
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> DeleteEmployee(int id)
    {
        var employee = _context.Employees.Find(id);
        if (employee != null)
        {
            _context.Employees.Remove(employee);
            await _context.SaveChangesAsync();
            TempData["Message"] = "Employee deleted successfully!";
        }
        return RedirectToAction("EmployeeDetails");
    }

    // Attendance Requests Methods
    public IActionResult AttendanceRequests()
    {
        var requests = _context.AttendanceRequests.ToList();
        return View(requests);
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> ApproveAttendanceRequest(int id)
    {
        var request = _context.AttendanceRequests.Find(id);
        if (request != null)
        {
            request.Status = "Approved";
            _context.AttendanceRequests.Update(request);
            await _context.SaveChangesAsync();
            TempData["Message"] = "Attendance request approved!";
        }
        return RedirectToAction("AttendanceRequests");
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> RejectAttendanceRequest(int id)
    {
        var request = _context.AttendanceRequests.Find(id);
        if (request != null)
        {
            request.Status = "Rejected";
            _context.AttendanceRequests.Update(request);
            await _context.SaveChangesAsync();
            TempData["Message"] = "Attendance request rejected!";
        }
        return RedirectToAction("AttendanceRequests");
    }

    // Leave Requests Methods
    public IActionResult LeaveRequests()
    {
        var requests = _context.LeaveRequests.ToList();
        return View(requests);
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> ApproveLeaveRequest(int id)
    {
        var request = _context.LeaveRequests.Find(id);
        if (request != null)
        {
            request.Status = "Approved";
            _context.LeaveRequests.Update(request);
            await _context.SaveChangesAsync();
            TempData["Message"] = "Leave request approved!";
        }
        return RedirectToAction("LeaveRequests");
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> RejectLeaveRequest(int id)
    {
        var request = _context.LeaveRequests.Find(id);
        if (request != null)
        {
            request.Status = "Rejected";
            _context.LeaveRequests.Update(request);
            await _context.SaveChangesAsync();
            TempData["Message"] = "Leave request rejected!";
        }
        return RedirectToAction("LeaveRequests");
    }
}




@{
    ViewData["Title"] = "Project Details";
}

<div class="content">
    <h3 class="page-header">Project Details</h3>
    <a href="@Url.Action("CreateNewProject", "Admin")" class="btn btn-success mb-3">Create New</a>

    <table class="table table-bordered table-hover mt-3">
        <thead class="thead-dark">
            <tr>
                <th>ProjectID</th>
                <th>ProjectName</th>
                <th>StartDate</th>
                <th>EndDate</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in Model)
            {
                <tr>
                    <td>@project.ProjectID</td>
                    <td>@project.ProjectName</td>
                    <td>@project.StartDate.ToShortDateString()</td>
                    <td>@project.EndDate.ToShortDateString()</td>
                    <td>@project.Status</td>
                    <td>
                        <a href="@Url.Action("EditProject", "Admin", new { id = project.ProjectID })" class="btn btn-warning btn-sm">Edit</a>
                        <form action="@Url.Action("DeleteProject", "Admin", new { id = project.ProjectID })" method="post" style="display:inline;">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this project?');">Delete</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


@{
    ViewData["Title"] = "Create New Project";
}

<h2>Create New Project</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-group">
        <label for="ProjectName">Project Name</label>
        <input type="text" class="form-control" id="ProjectName" name="ProjectName" required />
    </div>

    <div class="form-group">
        <label for="StartDate">Start Date</label>
        <input type="date" class="form-control" id="StartDate" name="StartDate" required />
    </div>

    <div class="form-group">
        <label for="EndDate">End Date</label>
        <input type="date" class="form-control" id="EndDate" name="EndDate" required />
    </div>

    <div class="form-group">
        <label for="Status">Status</label>
        <input type="text" class="form-control" id="Status" name="Status" required />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
    <a href="@Url.Action("ProjectDetails", "Admin")" class="btn btn-secondary">Cancel</a>
}



@{
    ViewData["Title"] = "Edit Project";
}

<h2>Edit Project</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-group">
        <label for="ProjectName">Project Name</label>
        <input type="text" class="form-control" id="ProjectName" name="ProjectName" value="@Model.ProjectName" required />
    </div>

    <div class="form-group">
        <label for="StartDate">Start Date</label>
        <input type="date" class="form-control" id="StartDate" name="StartDate" value="@Model.StartDate.ToString("yyyy-MM-dd")" required />
    </div>

    <div class="form-group">
        <label for="EndDate">End Date</label>
        <input type="date" class="form-control" id="EndDate" name="EndDate" value="@Model.EndDate.ToString("yyyy-MM-dd")" required />
    </div>

    <div class="form-group">
        <label for="Status">Status</label>
        <input type="text" class="form-control" id="Status" name="Status" value="@Model.Status" required />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <a href="@Url.Action("ProjectDetails", "Admin")" class="btn btn-secondary">Cancel</a>
}




@{
    ViewData["Title"] = "Admin Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #000;
            color: #ecf0f1;
            margin: 0;
            padding: 0;
        }

        .navbar {
            background-color: rgba(0, 0, 0, 0.8);
            transition: background-color 0.3s ease-in-out;
        }

        .navbar:hover {
            background-color: rgba(0, 0, 0, 0.9);
        }

        .navbar-brand {
            font-size: 1.8em;
            color: #ffffff !important;
        }

        .sidebar {
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.9);
            padding-top: 30px;
            position: fixed;
            top: 0;
            left: 0;
            width: 250px;
            transition: width 0.3s ease-in-out;
            overflow: hidden;
            overflow-y: auto;
        }

        .sidebar:hover {
            width: 280px;
        }

        .sidebar a {
            color: #ffffff;
            display: block;
            padding: 20px;
            text-decoration: none;
            font-size: 1.2em;
            transition: background-color 0.3s, padding-left 0.3s;
            border-left: 4px solid transparent;
        }

        .sidebar a:hover {
            background-color: rgba(255, 255, 255, 0.1);
            padding-left: 25px;
            border-left: 4px solid #16a085;
        }

        .sidebar .active {
            background-color: #16a085;
            border-left: 4px solid #1abc9c;
        }

        .content {
            margin-left: 270px;
            padding: 30px;
            color: #ecf0f1;
        }

        .card {
            margin-bottom: 30px;
            border: none;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
            background-color: rgba(255, 255, 255, 0.1);
            color: #ecf0f1;
            transition: transform 0.3s ease-in-out, background-color 0.3s, box-shadow 0.3s;
        }

        .card:hover {
            transform: scale(1.05);
            background-color: rgba(255, 255, 255, 0.2);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
        }

        .card-title {
            font-size: 1.8em;
        }

        .card-text {
            font-size: 1.2em;
        }

        .btn {
            font-size: 1.2em;
            padding: 0.75em 1.5em;
        }

        .welcome-box {
            background-color: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
        }

        .welcome-box h3 {
            font-size: 2em;
            margin-bottom: 10px;
        }

        .welcome-box p {
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <a class="navbar-brand" href="@Url.Action("Index", "Home")">LeaveMaster</a>
    </nav>

    <div class="sidebar">
        <a href="@Url.Action("Index", "Admin")" class="active">Dashboard</a>
        <a href="@Url.Action("EmployeeDetails", "Admin")">Manage Employees</a>
        <a href="@Url.Action("ProjectDetails", "Admin")">Manage Projects</a>
        <a href="@Url.Action("AttendanceRequests", "Requests")">Attendance Requests</a>
        <a href="@Url.Action("LeaveRequests", "Requests")">Leave Requests</a>
    </div>

    <div class="content">
        <div class="welcome-box">
            <h3>Welcome to the Admin Dashboard</h3>
            <p>Use the sidebar to navigate through different sections of the admin panel.</p>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Manage Employees</h5>
                <p class="card-text">Add, update, or delete employee information and manage their roles.</p>
                <a href="@Url.Action("EmployeeDetails", "Admin")" class="btn btn-primary">Manage Employees</a>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Manage Projects</h5>
                <p class="card-text">Add, update, or delete project information and assign projects to employees.</p>
                <a href="@Url.Action("ProjectDetails", "Admin")" class="btn btn-primary">Manage Projects</a>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Attendance Requests</h5>
                <p class="card-text">View and manage pending attendance requests.</p>
                <a href="@Url.Action("AttendanceRequests", "Requests")" class="btn btn-primary">View Requests</a>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Leave Requests</h5>
                <p class="card-text">View and manage pending leave requests.</p>
                <a href="@Url.Action("LeaveRequests", "Requests")" class="btn btn-primary">View Requests</a>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
</body>
</html>



@{
    ViewData["Title"] = "Attendance Requests";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f8f9fa;
            color: #343a40;
            margin: 0;
            padding: 0;
        }

        .content {
            margin: 20px;
        }

        .page-header {
            border-bottom: 2px solid #343a40;
            padding-bottom: 10px;
            margin-bottom: 20px;
            color: #343a40;
        }

        .table {
            width: 100%;
            margin-bottom: 1rem;
            color: #343a40;
            background-color: #ffffff;
            border-collapse: collapse;
        }

        .table th, .table td {
            padding: 0.75rem;
            vertical-align: middle;
            border: 1px solid #dee2e6;
        }

        .thead-dark th {
            background-color: #343a40;
            color: #ffffff;
            border-color: #454d55;
        }

        .table-hover tbody tr:hover {
            background-color: #f1f1f1;
        }

        .btn {
            font-size: 1.2em;
            padding: 0.75em 1.5em;
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }

        .btn-primary:hover {
            background-color: #0056b3;
        }

        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
        }

        .btn-success:hover {
            background-color: #218838;
        }

        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }
    </style>
</head>
<body>
    <div class="content">
        <h3 class="page-header">Attendance Requests</h3>
        <table class="table table-bordered table-hover mt-3">
            <thead class="thead-dark">
                <tr>
                    <th>Request ID</th>
                    <th>Employee Name</th>
                    <th>Request Date</th>
                    <th>Attendance Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>1</td>
                    <td>John Doe</td>
                    <td>@DateTime.Now.AddDays(-2).ToShortDateString()</td>
                    <td>@DateTime.Now.AddDays(-1).ToShortDateString()</td>
                    <td>Pending</td>
                    <td>
                        <form action="/Requests/ApproveAttendance/1" method="post" style="display:inline;">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-success btn-sm" onclick="return confirm('Approve this request?');">Approve</button>
                        </form>
                        <form action="/Requests/RejectAttendance/1" method="post" style="display:inline;">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Reject this request?');">Reject</button>
                        </form>
                    </td>
                </tr>
                <!-- Add more rows as necessary with different hardcoded values -->
            </tbody>
        </table>
    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
</body>
</html>




@{
    ViewData["Title"] = "Leave Requests";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f8f9fa;
            color: #343a40;
            margin: 0;
            padding: 0;
        }

        .content {
            margin: 20px;
        }

        .page-header {
            border-bottom: 2px solid #343a40;
            padding-bottom: 10px;
            margin-bottom: 20px;
            color: #343a40;
        }

        .table {
            width: 100%;
            margin-bottom: 1rem;
            color: #343a40;
            background-color: #ffffff;
            border-collapse: collapse;
        }

        .table th, .table td {
            padding: 0.75rem;
            vertical-align: middle;
            border: 1px solid #dee2e6;
        }

        .thead-dark th {
            background-color: #343a40;
            color: #ffffff;
            border-color: #454d55;
        }

        .table-hover tbody tr:hover {
            background-color: #f1f1f1;
        }

        .btn {
            font-size: 1.2em;
            padding: 0.75em 1.5em;
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }

        .btn-primary:hover {
            background-color: #0056b3;
        }

        .btn-success {
            background-color: #28a745;
            border-color: #28a745;
        }

        .btn-success:hover {
            background-color: #218838;
        }

        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }
    </style>
</head>
<body>
    <div class="content">
        <h3 class="page-header">Leave Requests</h3>
        <table class="table table-bordered table-hover mt-3">
            <thead class="thead-dark">
                <tr>
                    <th>Request ID</th>
                    <th>Employee Name</th>
                    <th>Request Date</th>
                    <th>Leave Start Date</th>
                    <th>Leave End Date</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>1</td>
                    <td>Jane Smith</td>
                    <td>@DateTime.Now.AddDays(-3).ToShortDateString()</td>
                    <td>@DateTime.Now.AddDays(1).ToShortDateString()</td>
                    <td>@DateTime.Now.AddDays(5).ToShortDateString()</td>
                    <td>Pending</td>
                    <td>
                        <form action="/Requests/ApproveLeave/1" method="post" style="display:inline;">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-success btn-sm" onclick="return confirm('Approve this leave request?');">Approve</button>
                        </form>
                        <form action="/Requests/RejectLeave/1" method="post" style="display:inline;">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Reject this leave request?');">Reject</button>
                        </form>
                    </td>
                </tr>
                <!-- Add more rows as necessary with different hardcoded values -->
            </tbody>
        </table>
    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
</body>
</html>
