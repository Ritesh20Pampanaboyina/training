using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace ALMSystem2.Controllers
{
    public class AdminController : Controller
    {
        // GET: Admin/Login
        public ActionResult AdminLogin()
        {
            return View();
        }

        // POST: Admin/Login
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AdminLogin(string username, string password)
        {
            if (username == "admin" && password == "password") // Example validation
            {
                return RedirectToAction("AdminDashboard");
            }

            ModelState.AddModelError("", "Invalid login attempt.");
            return View();
        }

        // GET: Admin/Dashboard
        public ActionResult AdminDashboard()
        {
            return View();
        }

        public ActionResult EmployeeDetails()
        {
            var employees = new List<object>
    {
        new { EmployeeID = 1, EmployeeName = "John Doe", Email = "johndoe@example.com", Phone = "123-456-7890", HireDate = DateTime.Now.AddYears(-5), RoleID = 1, ManagerID = 2, ProjectID = 1, LeaveBalance = 10, No_of_leave = 5, Emp_status = "Active" }
        // Add more employees as necessary
    };
            return View();
        }
        

        public ActionResult CreateNewEmployee()
        {
            return View();
        }

        // POST: Admin/CreateNewEmployee
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateNewEmployee(FormCollection form)
        {
            // Extract form values
            string employeeName = form["EmployeeName"];
            string email = form["Email"];
            string phone = form["Phone"];
            DateTime hireDate = Convert.ToDateTime(form["HireDate"]);
            int roleID = Convert.ToInt32(form["RoleID"]);
            int managerID = Convert.ToInt32(form["ManagerID"]);
            int projectID = Convert.ToInt32(form["ProjectID"]);
            int leaveBalance = Convert.ToInt32(form["LeaveBalance"]);
            int no_of_leave = Convert.ToInt32(form["No_of_leave"]);
            string emp_status = form["Emp_status"];

            // Add the new employee to the database (replace with actual data insertion logic)
            // Example:
            // db.AddEmployee(employeeName, email, phone, hireDate, roleID, managerID, projectID, leaveBalance, no_of_leave, emp_status);

            // After adding the new employee, redirect to EmployeeDetails
            return RedirectToAction("EmployeeDetails");
        }


        // GET: Admin/EditEmployee/1
        public ActionResult EditEmployee(int id)
        {
            // Ideally, fetch the employee from the database using the id
            // Example (replace with actual data retrieval logic):
            var employee = new
            {
                EmployeeID = id,
                EmployeeName = "John Doe",
                Email = "johndoe@example.com",
                Phone = "123-456-7890",
                HireDate = DateTime.Now.AddYears(-5),
                RoleID = 1,
                ManagerID = 2,
                ProjectID = 1,
                LeaveBalance = 10,
                No_of_leave = 5,
                Emp_status = "Active"
            };

            // Pass the data to the view using ViewBag
            ViewBag.EmployeeName = employee.EmployeeName;
            ViewBag.Email = employee.Email;
            ViewBag.Phone = employee.Phone;
            ViewBag.HireDate = employee.HireDate.ToShortDateString();
            ViewBag.RoleID = employee.RoleID;
            ViewBag.ManagerID = employee.ManagerID;
            ViewBag.ProjectID = employee.ProjectID;
            ViewBag.LeaveBalance = employee.LeaveBalance;
            ViewBag.No_of_leave = employee.No_of_leave;
            ViewBag.Emp_status = employee.Emp_status;

            return View();
        }

        // POST: Admin/EditEmployee/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditEmployee(int id, FormCollection form)
        {
            // You can extract form values like this (replace with actual logic)
            string employeeName = form["EmployeeName"];
            string email = form["Email"];
            string phone = form["Phone"];
            DateTime hireDate = Convert.ToDateTime(form["HireDate"]);
            int roleID = Convert.ToInt32(form["RoleID"]);
            int managerID = Convert.ToInt32(form["ManagerID"]);
            int projectID = Convert.ToInt32(form["ProjectID"]);
            int leaveBalance = Convert.ToInt32(form["LeaveBalance"]);
            int no_of_leave = Convert.ToInt32(form["No_of_leave"]);
            string emp_status = form["Emp_status"];

            return RedirectToAction("EmployeeDetails");
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteEmployee(int id)
        {
            // Simulate delete logic here

            return RedirectToAction("EmployeeDetails");
        }

        public ActionResult ProjectDetails()
        {
            var projects = new List<object>
            {
                new { ProjectID = 1, ProjectName = "Project Alpha", StartDate = DateTime.Now.AddMonths(-6), EndDate = DateTime.Now.AddMonths(6), Status = "Active" }
                // Add more projects as necessary
            };
            return View(projects);
        }

        // GET: Admin/CreateNewProject
        public ActionResult CreateNewProject()
        {
            return View();
        }

        // POST: Admin/CreateNewProject
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateNewProject(FormCollection form)
        {
            // Extract form values
            string projectName = form["ProjectName"];
            DateTime startDate = Convert.ToDateTime(form["StartDate"]);
            DateTime endDate = Convert.ToDateTime(form["EndDate"]);
            string status = form["Status"];

            // Add the new project to the database (replace with actual data insertion logic)
            // Example:
            // db.AddProject(projectName, startDate, endDate, status);

            // After adding the new project, redirect to ProjectDetails
            return RedirectToAction("ProjectDetails");
        }

        // GET: Admin/EditProject/1
        public ActionResult EditProject(int id)
        {
            // Ideally, fetch the project from the database using the id
            // Example (replace with actual data retrieval logic):
            var project = new
            {
                ProjectID = id,
                ProjectName = "Project Alpha",
                StartDate = DateTime.Now.AddMonths(-6),
                EndDate = DateTime.Now.AddMonths(6),
                Status = "Active"
            };

            // Pass the data to the view using ViewBag
            ViewBag.ProjectName = project.ProjectName;
            ViewBag.StartDate = project.StartDate.ToShortDateString();
            ViewBag.EndDate = project.EndDate.ToShortDateString();
            ViewBag.Status = project.Status;

            return View();
        }

        // POST: Admin/EditProject/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditProject(int id, FormCollection form)
        {
            // Extract form values (replace with actual logic)
            string projectName = form["ProjectName"];
            DateTime startDate = Convert.ToDateTime(form["StartDate"]);
            DateTime endDate = Convert.ToDateTime(form["EndDate"]);
            string status = form["Status"];

            // Update project in the database (replace with actual data update logic)

            return RedirectToAction("ProjectDetails");
        }

        // POST: Admin/DeleteProject/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteProject(int id)
        {
            // Simulate delete logic here

            return RedirectToAction("ProjectDetails");
        }

        public ActionResult AttendanceRequests()
        {
            // Example data for attendance requests
            var attendanceRequests = new List<object>
            {
                new { EmployeeName = "John Doe", Date = "2024-08-20", Status = "Pending" },
                new { EmployeeName = "Jane Smith", Date = "2024-08-21", Status = "Pending" }
            };

            return View(attendanceRequests);
        }

        // GET: /Requests/LeaveRequests
        public ActionResult LeaveRequests()
        {
            // Example data for leave requests
            var leaveRequests = new List<object>
            {
                new { EmployeeName = "Michael Brown", LeaveType = "Sick Leave", StartDate = "2024-08-20", EndDate = "2024-08-22", Status = "Pending" },
                new { EmployeeName = "Emily Davis", LeaveType = "Annual Leave", StartDate = "2024-08-25", EndDate = "2024-08-30", Status = "Pending" }
            };

            return View(leaveRequests);
        }

        // POST: /Requests/ApproveAttendanceRequest/5
        [HttpPost]
        public ActionResult ApproveAttendanceRequest(int id)
        {
            // Logic to approve the attendance request
            TempData["Message"] = "Attendance request approved.";
            return RedirectToAction("AttendanceRequests");
        }

        // POST: /Requests/RejectAttendanceRequest/5
        [HttpPost]
        public ActionResult RejectAttendanceRequest(int id)
        {
            // Logic to reject the attendance request
            TempData["Message"] = "Attendance request rejected.";
            return RedirectToAction("AttendanceRequests");
        }

        // POST: /Requests/ApproveLeaveRequest/5
        [HttpPost]
        public ActionResult ApproveLeaveRequest(int id)
        {
            // Logic to approve the leave request
            TempData["Message"] = "Leave request approved.";
            return RedirectToAction("LeaveRequests");
        }

        // POST: /Requests/RejectLeaveRequest/5
        [HttpPost]
        public ActionResult RejectLeaveRequest(int id)
        {
            // Logic to reject the leave request
            TempData["Message"] = "Leave request rejected.";
            return RedirectToAction("LeaveRequests");
        }
    }
}
}
    

@{
    ViewData["Title"] = "Admin Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #000;
            color: #ecf0f1;
            margin: 0;
            padding: 0;
        }

        .navbar {
            background-color: rgba(0, 0, 0, 0.8);
            transition: background-color 0.3s ease-in-out;
        }

            .navbar:hover {
                background-color: rgba(0, 0, 0, 0.9);
            }

        .navbar-brand {
            font-size: 1.8em;
            color: #ffffff !important;
        }

        .sidebar {
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.9);
            padding-top: 30px;
            position: fixed;
            top: 0;
            left: 0;
            width: 250px;
            transition: width 0.3s ease-in-out;
            overflow: hidden;
            overflow-y: auto;
        }

            .sidebar:hover {
                width: 280px;
            }

            .sidebar a {
                color: #ffffff;
                display: block;
                padding: 20px;
                text-decoration: none;
                font-size: 1.2em;
                transition: background-color 0.3s, padding-left 0.3s;
                border-left: 4px solid transparent;
            }

                .sidebar a:hover {
                    background-color: rgba(255, 255, 255, 0.1);
                    padding-left: 25px;
                    border-left: 4px solid #16a085;
                }

            .sidebar .active {
                background-color: #16a085;
                border-left: 4px solid #1abc9c;
            }

        .content {
            margin-left: 270px;
            padding: 30px;
            color: #ecf0f1;
        }

        .card {
            margin-bottom: 30px;
            border: none;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
            background-color: rgba(255, 255, 255, 0.1);
            color: #ecf0f1;
            transition: transform 0.3s ease-in-out, background-color 0.3s, box-shadow 0.3s;
        }

            .card:hover {
                transform: scale(1.05);
                background-color: rgba(255, 255, 255, 0.2);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            }

        .card-title {
            font-size: 1.8em;
        }

        .card-text {
            font-size: 1.2em;
        }

        .btn {
            font-size: 1.2em;
            padding: 0.75em 1.5em;
        }

        .welcome-box {
            background-color: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
        }

            .welcome-box h3 {
                font-size: 2em;
                margin-bottom: 10px;
            }

            .welcome-box p {
                font-size: 1.2em;
            }
    </style>
</head>
<body>
    <div class="sidebar">
        <a href="#" class="active">Dashboard</a>
        <a href="@Url.Action("ManageEmployees", "Admin")">Manage Employees</a>
        <a href="@Url.Action("ManageProjects", "Admin")">Manage Projects</a>
        <a href="@Url.Action("AttendanceRequests", "Requests")">Attendance Requests</a>
        <a href="@Url.Action("LeaveRequests", "Requests")">Leave Requests</a>
    </div>

    <div class="content">
        <div class="welcome-box">
            <h3>Welcome to the Admin Dashboard</h3>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Manage Employees</h5>
                <p class="card-text">Add, update, or delete employee information and manage their roles.</p>
                <a href="@Url.Action("ManageEmployees", "Admin")" class="btn btn-primary">Manage Employees</a>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Manage Projects</h5>
                <p class="card-text">Add, update, or delete project information and assign projects to employees.</p>
                <a href="@Url.Action("ManageProjects", "Admin")" class="btn btn-primary">Manage Projects</a>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Attendance Requests</h5>
                <p class="card-text">View and manage pending attendance requests.</p>
                <a href="@Url.Action("AttendanceRequests", "Requests")" class="btn btn-primary">View Requests</a>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Leave Requests</h5>
                <p class="card-text">View and manage pending leave requests.</p>
                <a href="@Url.Action("LeaveRequests", "Requests")" class="btn btn-primary">View Requests</a>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
</body>
</html>

@{
    ViewData["Title"] = "Leave Requests";
}

<h1>Leave Requests</h1>

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">
        @TempData["Message"]
    </div>
}

<table class="table table-dark">
    <thead>
        <tr>
            <th>Employee Name</th>
            <th>Leave Type</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Status</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var request in Model)
        {
            <tr>
                <td>@request.EmployeeName</td>
                <td>@request.LeaveType</td>
                <td>@request.StartDate</td>
                <td>@request.EndDate</td>
                <td>@request.Status</td>
                <td>
                    <form asp-action="ApproveLeaveRequest" method="post" style="display:inline;">
                        <input type="hidden" name="id" value="@request.EmployeeName" />
                        <button type="submit" class="btn btn-success btn-sm">Approve</button>
                    </form>
                    <form asp-action="RejectLeaveRequest" method="post" style="display:inline;">
                        <input type="hidden" name="id" value="@request.EmployeeName" />
                        <button type="submit" class="btn btn-danger btn-sm">Reject</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>



@{
    ViewData["Title"] = "Attendance Requests";
}

<h1>Attendance Requests</h1>

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">
        @TempData["Message"]
    </div>
}

<table class="table table-dark">
    <thead>
        <tr>
            <th>Employee Name</th>
            <th>Date</th>
            <th>Status</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var request in Model)
        {
            <tr>
                <td>@request.EmployeeName</td>
                <td>@request.Date</td>
                <td>@request.Status</td>
                <td>
                    <form asp-action="ApproveAttendanceRequest" method="post" style="display:inline;">
                        <input type="hidden" name="id" value="@request.EmployeeName" />
                        <button type="submit" class="btn btn-success btn-sm">Approve</button>
                    </form>
                    <form asp-action="RejectAttendanceRequest" method="post" style="display:inline;">
                        <input type="hidden" name="id" value="@request.EmployeeName" />
                        <button type="submit" class="btn btn-danger btn-sm">Reject</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    ViewData["Title"] = "Edit Project";
}

<h2>Edit Project</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-group">
        <label for="ProjectName">Project Name</label>
        <input type="text" class="form-control" id="ProjectName" name="ProjectName" value="@ViewBag.ProjectName" required />
    </div>

    <div class="form-group">
        <label for="StartDate">Start Date</label>
        <input type="date" class="form-control" id="StartDate" name="StartDate" value="@ViewBag.StartDate" required />
    </div>

    <div class="form-group">
        <label for="EndDate">End Date</label>
        <input type="date" class="form-control" id="EndDate" name="EndDate" value="@ViewBag.EndDate" required />
    </div>

    <div class="form-group">
        <label for="Status">Status</label>
        <input type="text" class="form-control" id="Status" name="Status" value="@ViewBag.Status" required />
    </div>

    <button type="submit" class="btn btn-primary">Update</button>
    <a href="@Url.Action("ProjectDetails", "Admin")" class="btn btn-secondary">Cancel</a>
}

<style>
    body {
        font-family: 'Roboto', sans-serif;
        background-color: #f8f9fa;
        color: #343a40;
        margin: 0;
        padding: 0;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-control {
        display: block;
        width: 100%;
        height: calc(1.5em + .75rem + 2px);
        padding: .375rem .75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #495057;
        background-color: #ffffff;
        border: 1px solid #ced4da;
        border-radius: .25rem;
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }

    .btn {
        display: inline-block;
        font-weight: 400;
        color: #fff;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        background-color: #007bff;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: 0.25rem;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }
</style>

@{
    ViewData["Title"] = "Create New Project";
}

<h2>Create New Project</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-group">
        <label for="ProjectName">Project Name</label>
        <input type="text" class="form-control" id="ProjectName" name="ProjectName" required />
    </div>

    <div class="form-group">
        <label for="StartDate">Start Date</label>
        <input type="date" class="form-control" id="StartDate" name="StartDate" required />
    </div>

    <div class="form-group">
        <label for="EndDate">End Date</label>
        <input type="date" class="form-control" id="EndDate" name="EndDate" required />
    </div>

    <div class="form-group">
        <label for="Status">Status</label>
        <input type="text" class="form-control" id="Status" name="Status" required />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
    <a href="@Url.Action("ProjectDetails", "Admin")" class="btn btn-secondary">Cancel</a>
}

<style>
    body {
        font-family: 'Roboto', sans-serif;
        background-color: #f8f9fa;
        color: #343a40;
        margin: 0;
        padding: 0;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-control {
        display: block;
        width: 100%;
        height: calc(1.5em + .75rem + 2px);
        padding: .375rem .75rem;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.5;
        color: #495057;
        background-color: #ffffff;
        border: 1px solid #ced4da;
        border-radius: .25rem;
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }

    .btn {
        display: inline-block;
        font-weight: 400;
        color: #fff;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        background-color: #007bff;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: 0.25rem;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }
</style>



@{
    ViewData["Title"] = "Project Details";
}

<div class="content">
    <h3 class="page-header">Project Details</h3>
    <a href="/Admin/CreateNewProject" class="btn btn-success mb-3">Create New</a>

    <table class="table table-bordered table-hover mt-3">
        <thead class="thead-dark">
            <tr>
                <th>ProjectID</th>
                <th>ProjectName</th>
                <th>StartDate</th>
                <th>EndDate</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in (IEnumerable<dynamic>)ViewData.Model)
            {
                <tr>
                    <td>@project.ProjectID</td>
                    <td>@project.ProjectName</td>
                    <td>@project.StartDate.ToShortDateString()</td>
                    <td>@project.EndDate.ToShortDateString()</td>
                    <td>@project.Status</td>
                    <td>
                        <a href="/Admin/EditProject/@project.ProjectID" class="btn btn-warning btn-sm">Edit</a>
                        <form action="/Admin/DeleteProject/@project.ProjectID" method="post" style="display:inline;">
                            @Html.AntiForgeryToken()
                            <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this project?');">Delete</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
    body {
        font-family: 'Roboto', sans-serif;
        background-color: #f8f9fa;
        color: #343a40;
        margin: 0;
        padding: 0;
    }

    .content {
        margin: 20px;
    }

    .page-header {
        border-bottom: 2px solid #343a40;
        padding-bottom: 10px;
        margin-bottom: 20px;
        color: #343a40;
    }

    .table {
        width: 100%;
        margin-bottom: 1rem;
        color: #343a40;
        background-color: #ffffff;
        border-collapse: collapse;
    }

        .table th,
        .table td {
            padding: 0.75rem;
            vertical-align: middle;
            border: 1px solid #dee2e6;
        }

    .thead-dark th {
        background-color: #343a40;
        color: #ffffff;
        border-color: #454d55;
    }

    .table-hover tbody tr:hover {
        background-color: #f1f1f1;
    }

    .btn {
        display: inline-block;
        font-weight: 400;
        color: #fff;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        background-color: #007bff;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: 0.25rem;
    }

    .btn-warning {
        background-color: #f39c12;
        border: none;
    }

        .btn-warning:hover {
            background-color: #e67e22;
        }

    .btn-danger {
        background-color: #e74c3c;
        border: none;
    }

        .btn-danger:hover {
            background-color: #c0392b;
        }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .mb-3 {
        margin-bottom: 1rem;
    }

    .mt-3 {
        margin-top: 1rem;
    }
</style>


@{
    ViewData["Title"] = "Edit Employee";
}

<h2>Edit Employee</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-group">
        <label for="EmployeeName">Employee Name</label>
        <input type="text" class="form-control" id="EmployeeName" name="EmployeeName" value="@ViewBag.EmployeeName" />
    </div>

    <div class="form-group">
        <label for="Email">Email</label>
        <input type="email" class="form-control" id="Email" name="Email" value="@ViewBag.Email" />
    </div>

    <div class="form-group">
        <label for="Phone">Phone</label>
        <input type="text" class="form-control" id="Phone" name="Phone" value="@ViewBag.Phone" />
    </div>

    <div class="form-group">
        <label for="HireDate">Hire Date</label>
        <input type="text" class="form-control" id="HireDate" name="HireDate" value="@ViewBag.HireDate" />
    </div>

    <div class="form-group">
        <label for="RoleID">Role ID</label>
        <input type="text" class="form-control" id="RoleID" name="RoleID" value="@ViewBag.RoleID" />
    </div>

    <div class="form-group">
        <label for="ManagerID">Manager ID</label>
        <input type="text" class="form-control" id="ManagerID" name="ManagerID" value="@ViewBag.ManagerID" />
    </div>

    <div class="form-group">
        <label for="ProjectID">Project ID</label>
        <input type="text" class="form-control" id="ProjectID" name="ProjectID" value="@ViewBag.ProjectID" />
    </div>

    <div class="form-group">
        <label for="LeaveBalance">Leave Balance</label>
        <input type="text" class="form-control" id="LeaveBalance" name="LeaveBalance" value="@ViewBag.LeaveBalance" />
    </div>

    <div class="form-group">
        <label for="No_of_leave">Number of Leaves Taken</label>
        <input type="text" class="form-control" id="No_of_leave" name="No_of_leave" value="@ViewBag.No_of_leave" />
    </div>

    <div class="form-group">
        <label for="Emp_status">Employee Status</label>
        <input type="text" class="form-control" id="Emp_status" name="Emp_status" value="@ViewBag.Emp_status" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <a href="@Url.Action("EmployeeDetails", "Admin")" class="btn btn-secondary">Cancel</a>
}

<style>
    body {
        font-family: 'Roboto', sans-serif;
        background-color: #f8f9fa;
        color: #343a40;
        margin: 0;
        padding: 0;
    }

    .form-group {
        margin-bottom: 1rem;
    }

        .form-group label {
            font-weight: bold;
        }

    .form-control {
        width: 100%;
        padding: 0.375rem 0.75rem;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
    }

    .btn {
        display: inline-block;
        font-weight: 400;
        color: #fff;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        background-color: #007bff;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: 0.25rem;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }
</style>




@{
    ViewData["Title"] = "Employee Details";
}

<div class="content">
    <h3 class="page-header">Employee Details</h3>
    <a href="/Admin/CreateNewEmployee" class="btn btn-success mb-3">Create New</a>

    <table class="table table-bordered table-hover mt-3">
        <thead class="thead-dark">
            <tr>
                <th>EmployeeID</th>
                <th>EmployeeName</th>
                <th>Email</th>
                <th>Phone</th>
                <th>HireDate</th>
                <th>RoleID</th>
                <th>ManagerID</th>
                <th>ProjectID</th>
                <th>LeaveBalance</th>
                <th>No_of_leave</th>
                <th>Emp_status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>1</td>
                <td>John Doe</td>
                <td>johndoe@example.com</td>
                <td>123-456-7890</td>
                <td>@DateTime.Now.AddYears(-5).ToShortDateString()</td>
                <td>1</td>
                <td>2</td>
                <td>1</td>
                <td>10</td>
                <td>5</td>
                <td>Active</td>
                <td>
                    <a href="/Admin/EditEmployee/1" class="btn btn-warning btn-sm">Edit</a>
                    <form action="/Admin/DeleteEmployee/1" method="post" style="display:inline;">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this employee?');">Delete</button>
                    </form>
                </td>
            </tr>
            <!-- Add more rows as necessary with different hardcoded values -->
        </tbody>
    </table>
</div>

<style>
    body {
        font-family: 'Roboto', sans-serif;
        background-color: #f8f9fa;
        color: #343a40;
        margin: 0;
        padding: 0;
    }

    .content {
        margin: 20px;
    }

    .page-header {
        border-bottom: 2px solid #343a40;
        padding-bottom: 10px;
        margin-bottom: 20px;
        color: #343a40;
    }

    .table {
        width: 100%;
        margin-bottom: 1rem;
        color: #343a40;
        background-color: #ffffff;
        border-collapse: collapse;
    }

        .table th,
        .table td {
            padding: 0.75rem;
            vertical-align: middle;
            border: 1px solid #dee2e6;
        }

    .thead-dark th {
        background-color: #343a40;
        color: #ffffff;
        border-color: #454d55;
    }

    .table-hover tbody tr:hover {
        background-color: #f1f1f1;
    }

    .btn {
        display: inline-block;
        font-weight: 400;
        color: #fff;
        text-align: center;
        vertical-align: middle;
        cursor: pointer;
        background-color: #007bff;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: 0.25rem;
    }

    .btn-warning {
        background-color: #f39c12;
        border: none;
    }

        .btn-warning:hover {
            background-color: #e67e22;
        }

    .btn-danger {
        background-color: #e74c3c;
        border: none;
    }

        .btn-danger:hover {
            background-color: #c0392b;
        }

    .btn-secondary {
        background-color: #6c757d;
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .mb-3 {
        margin-bottom: 1rem;
    }

    .mt-3 {
        margin-top: 1rem;
    }
</style>
