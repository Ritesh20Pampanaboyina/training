3. ASP.NET MVC Project Setup
Create a New Project
Open Visual Studio 2019.
Create a new ASP.NET Web Application.
Choose MVC as the project template.
4. Set Up Entity Framework
Install Entity Framework via NuGet
Go to Tools > NuGet Package Manager > Manage NuGet Packages for Solution.
Search for and install Entity Framework.
Create the Models
Create models corresponding to the database tables.

Employee.cs

public class Employee
{
    public int EmployeeID { get; set; }
    public string Name { get; set; }
    public string Role { get; set; }
    public string Email { get; set; }
    public string PasswordHash { get; set; }
    
    public ICollection<Attendance> Attendances { get; set; }
    public ICollection<Leave> Leaves { get; set; }
}

Project.cs

public class Project
{
    public int ProjectID { get; set; }
    public string ProjectName { get; set; }
    
    public ICollection<Attendance> Attendances { get; set; }
}

Attendance.cs

public class Attendance
{
    public int AttendanceID { get; set; }
    public int EmployeeID { get; set; }
    public int ProjectID { get; set; }
    public DateTime Date { get; set; }
    public string Status { get; set; }

    public Employee Employee { get; set; }
    public Project Project { get; set; }
}

Leave.cs

public class Leave
{
    public int LeaveID { get; set; }
    public int EmployeeID { get; set; }
    public string LeaveType { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }
    public string Status { get; set; }

    public Employee Employee { get; set; }
}

5. Set Up the DbContext
AttendanceLeaveDbContext.cs

public class AttendanceLeaveDbContext : DbContext
{
    public DbSet<Employee> Employees { get; set; }
    public DbSet<Project> Projects { get; set; }
    public DbSet<Attendance> Attendances { get; set; }
    public DbSet<Leave> Leaves { get; set; }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        // Configurations can go here
    }
}

6. Develop the Core Modules
Registration and Login
AccountController.cs

public class AccountController : Controller
{
    private AttendanceLeaveDbContext db = new AttendanceLeaveDbContext();

    [HttpGet]
    public ActionResult Register()
    {
        return View();
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult Register(Employee model)
    {
        if (ModelState.IsValid)
        {
            model.PasswordHash = HashPassword(model.PasswordHash); // You should use a hashing function
            db.Employees.Add(model);
            db.SaveChanges();
            return RedirectToAction("Login");
        }
        return View(model);
    }

    [HttpGet]
    public ActionResult Login()
    {
        return View();
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult Login(string email, string password)
    {
        var hashedPassword = HashPassword(password);
        var employee = db.Employees.SingleOrDefault(e => e.Email == email && e.PasswordHash == hashedPassword);
        if (employee != null)
        {
            // Set authentication cookie
            FormsAuthentication.SetAuthCookie(email, false);
            return RedirectToAction("Index", "Home");
        }
        ModelState.AddModelError("", "Invalid login attempt.");
        return View();
    }
}

Register.cshtml and Login.cshtml
Create views for registering and logging in users.

Register.cshtml

@model YourNamespace.Models.Employee

@{
    ViewBag.Title = "Register";
}

<h2>Register</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Employee</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(m => m.Name, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <!-- Add fields for email, password, etc. -->
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Register" class="btn btn-default" />
            </div>
        </div>
    </div>
}

Admin Module
AdminController.cs

[Authorize(Roles = "Admin")]
public class AdminController : Controller
{
    private AttendanceLeaveDbContext db = new AttendanceLeaveDbContext();

    // Actions to manage Employees, Projects, Attendance, and Leaves
    // For example:

    public ActionResult ManageEmployees()
    {
        var employees = db.Employees.ToList();
        return View(employees);
    }

    public ActionResult AddEmployee()
    {
        return View();
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult AddEmployee(Employee model)
    {
        if (ModelState.IsValid)
        {
            db.Employees.Add(model);
            db.SaveChanges();
            return RedirectToAction("ManageEmployees");
        }
        return View(model);
    }
}

7. Implement the Web API
API Controller for Employee Management
EmployeesController.cs

[Authorize]
public class EmployeesController : ApiController
{
    private AttendanceLeaveDbContext db = new AttendanceLeaveDbContext();

    // GET: api/Employees
    public IQueryable<Employee> GetEmployees()
    {
        return db.Employees;
    }

    // GET: api/Employees/5
    [ResponseType(typeof(Employee))]
    public async Task<IHttpActionResult> GetEmployee(int id)
    {
        Employee employee = await db.Employees.FindAsync(id);
        if (employee == null)
        {
            return NotFound();
        }

        return Ok(employee);
    }

    // POST: api/Employees
    [ResponseType(typeof(Employee))]
    public async Task<IHttpActionResult> PostEmployee(Employee employee)
    {
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        db.Employees.Add(employee);
        await db.SaveChangesAsync();

        return CreatedAtRoute("DefaultApi", new { id = employee.EmployeeID }, employee);
    }

    // DELETE: api/Employees/5
    [ResponseType(typeof(Employee))]
    public async Task<IHttpActionResult> DeleteEmployee(int id)
    {
        Employee employee = await db.Employees.FindAsync(id);
        if (employee == null)
        {
            return NotFound();
        }

        db.Employees.Remove(employee);
        await db.SaveChangesAsync();

        return Ok(employee);
    }
}

8. Testing
Unit Tests: Use MSTest or xUnit to write unit tests for the business logic.
Integration Tests: Test your Web API endpoints using tools like Postman.
9. Deploy and Test
Deploy the application to a web server like IIS, and ensure everything works in the production environment.

10. Version Control
Throughout development, use Git to commit your changes, push to a remote repository (like GitHub), and collaborate with others if necessary.

Final Note:
The example provided is a basic outline. Each module (Employee Management, Project Management, Attendance Tracking, Leave Management, etc.) needs to be fully fleshed out with corresponding views, controllers, models, and possibly API endpoints if you're using a separate API project.

This setup is a starting point, and you will need to adjust and extend it based on your specific requirements and business logic. If you have any specific questions about certain parts of the project, or if you need more detailed code for a specific feature, feel free to ask!










