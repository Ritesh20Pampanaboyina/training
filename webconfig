//using System;
//using System.Collections.Generic;
//using System.Web;
//using System.Web.Mvc;

//namespace ALMSystem2.Controllers
//{
//    public class EmployeeController : Controller
//    {
//        // GET: Employee/EmployeeLogin
//        public ActionResult EmployeeLogin()
//        {
//            return View();
//        }

//        // POST: Employee/EmployeeLogin
//        [HttpPost]
//        [ValidateAntiForgeryToken]
//        public ActionResult EmployeeLogin(string username, string password)
//        {
//            if (IsValidUser(username, password))
//            {
//                Session["IsLoggedIn"] = true;
//                Session["UserRole"] = "Employee"; // Optionally store role
//                return RedirectToAction("EmployeeDashboard");
//            }

//            ViewBag.ErrorMessage = "Invalid username or password.";
//            return View();
//        }

//        // GET: Employee/EmployeeDashboard
//        public ActionResult EmployeeDashboard()
//        {
//            if (!IsUserAuthenticated())
//            {
//                return RedirectToAction("EmployeeLogin");
//            }

//            return View();
//        }

//        // GET: Employee/ApplyLeave
//        public ActionResult ApplyLeave()
//        {
//            if (!IsUserAuthenticated())
//            {
//                return RedirectToAction("EmployeeLogin");
//            }

//            return View();
//        }

//        [HttpPost]
//        public ActionResult ApplyLeave(FormCollection form)
//        {
//            if (!IsUserAuthenticated())
//            {
//                return RedirectToAction("EmployeeLogin");
//            }

//            TempData["Message"] = "Leave application submitted successfully!";
//            return RedirectToAction("EmployeeDashboard");
//        }

//        // GET: Employee/SubmitAttendance
//        public ActionResult SubmitAttendance()
//        {
//            if (!IsUserAuthenticated())
//            {
//                return RedirectToAction("EmployeeLogin");
//            }

//            return View();
//        }

//        [HttpPost]
//        public ActionResult SubmitAttendance(FormCollection form)
//        {
//            if (!IsUserAuthenticated())
//            {
//                return RedirectToAction("EmployeeLogin");
//            }

//            TempData["Message"] = "Attendance submitted successfully!";
//            return RedirectToAction("EmployeeDashboard");
//        }

//        // GET: Employee/ViewProjects
//        public ActionResult ViewProjects()
//        {
//            if (!IsUserAuthenticated())
//            {
//                return RedirectToAction("EmployeeLogin");
//            }

//            var projects = new List<string> { "Project A", "Project B", "Project C" };
//            ViewBag.Projects = projects;

//            return View();
//        }

//        // Helper method to check if the user is authenticated
//        private bool IsUserAuthenticated()
//        {
//            return Session["IsLoggedIn"] != null && (bool)Session["IsLoggedIn"];
//        }

//        // GET: Employee/Logout
//        public ActionResult Logout()
//        {
//            Session["IsLoggedIn"] = null;
//            Session["UserRole"] = null;
//            return RedirectToAction("EmployeeLogin");
//        }

//        // Simulated method for example purposes
//        private bool IsValidUser(string username, string password)
//        {
//            // Replace with actual credential validation logic
//            return username == "employee" && password == "password";
//        }
//    }
//}


using System;
using System.Collections.Generic;
using System.Web.Mvc;

namespace ALMSystem2.Controllers
{
    public class EmployeeController : Controller
    {
        // GET: Employee/EmployeeLogin
        public ActionResult EmployeeLogin()
        {
            return View();
        }

        // POST: Employee/EmployeeLogin
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EmployeeLogin(string username, string password)
        {
            if (IsValidUser(username, password))
            {
                Session["IsLoggedIn"] = true;
                Session["UserRole"] = "Employee"; // Optionally store role
                return RedirectToAction("EmployeeDashboard");
            }

            ViewBag.ErrorMessage = "Invalid username or password.";
            return View();
        }

        // GET: Employee/EmployeeDashboard
        public ActionResult EmployeeDashboard()
        {
            if (!IsUserAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            return View();
        }

        // GET: Employee/ApplyLeave
        public ActionResult ApplyLeave()
        {
            if (!IsUserAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            return View();
        }

        // POST: Employee/ApplyLeave
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ApplyLeave(FormCollection form)
        {
            if (!IsUserAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            try
            {
                // Simulate leave application submission
                // Example: db.ApplyLeave(employeeID, startDate, endDate, leaveType, reason);

                TempData["Message"] = "Leave application submitted successfully!";
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = "An error occurred while submitting the leave application: " + ex.Message;
            }

            return RedirectToAction("EmployeeDashboard");
        }

        // GET: Employee/SubmitAttendance
        public ActionResult SubmitAttendance()
        {
            if (!IsUserAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            return View();
        }

        // POST: Employee/SubmitAttendance
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult SubmitAttendance(FormCollection form)
        {
            if (!IsUserAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            try
            {
                // Simulate attendance submission
                // Example: db.SubmitAttendance(employeeID, projectID, attendanceDate, status);

                TempData["Message"] = "Attendance submitted successfully!";
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = "An error occurred while submitting the attendance: " + ex.Message;
            }

            return RedirectToAction("EmployeeDashboard");
        }

        // GET: Employee/ViewProjects
        public ActionResult ViewProjects()
        {
            if (!IsUserAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            var projects = new List<string> { "Project A", "Project B", "Project C" };
            ViewBag.Projects = projects;

            return View();
        }

        // GET: Admin/LeaveDetails
        public ActionResult LeaveDetails()
        {
            if (!IsAdminAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            // Simulate leave request data; replace this with actual database retrieval
            var leaveRequests = new List<object>
            {
                new { LeaveID = 1, EmployeeID = 1, StartDate = DateTime.Now.AddDays(-10), EndDate = DateTime.Now.AddDays(-5), LeaveType = "Sick", Reason = "Flu", ApprovalStatus = "Approved", ManagerID = 2 }
                // Add more leave requests as necessary
            };

            ViewBag.LeaveRequests = leaveRequests; // Pass data to view
            return View();
        }

        // GET: Admin/CreateLeave
        public ActionResult CreateLeave()
        {
            if (!IsAdminAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            // Retrieve list of employees and managers
            ViewBag.Employees = new List<SelectListItem>
            {
                new SelectListItem { Value = "1", Text = "John Doe" }
                // Add more employees as necessary
            };

            ViewBag.Managers = new List<SelectListItem>
            {
                new SelectListItem { Value = "2", Text = "Jane Smith" }
                // Add more managers as necessary
            };

            return View();
        }

        // POST: Admin/CreateLeave
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateLeave(FormCollection form)
        {
            if (!IsAdminAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            try
            {
                // Extract form values
                int employeeID = Convert.ToInt32(form["EmployeeID"]);
                DateTime startDate = Convert.ToDateTime(form["StartDate"]);
                DateTime endDate = Convert.ToDateTime(form["EndDate"]);
                string leaveType = form["LeaveType"];
                string reason = form["Reason"];
                string approvalStatus = form["ApprovalStatus"] ?? "Pending";
                int managerID = Convert.ToInt32(form["ManagerID"]);

                // Add the new leave request to the database
                // Example: db.AddLeaveRequest(employeeID, startDate, endDate, leaveType, reason, approvalStatus, managerID);

                TempData["SuccessMessage"] = "Leave request created successfully.";
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = "An error occurred while creating the leave request: " + ex.Message;
            }

            return RedirectToAction("LeaveDetails");
        }

        // POST: Admin/DeleteLeave/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteLeave(int id)
        {
            if (!IsAdminAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            try
            {
                // Simulate delete logic here (replace with actual delete logic)
                // Example: db.DeleteLeaveRequest(id);

                TempData["SuccessMessage"] = "Leave request deleted successfully.";
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = "An error occurred while deleting the leave request: " + ex.Message;
            }

            return RedirectToAction("LeaveDetails");
        }

        // GET: Admin/AttendanceDetails
        public ActionResult AttendanceDetails()
        {
            if (!IsAdminAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            // Simulate attendance data; replace this with actual database retrieval
            var attendanceRecords = new List<object>
            {
                new { AttendanceID = 1, EmployeeID = 1, ProjectID = 101, AttendanceDate = DateTime.Now.AddDays(-10), Status = "Present", ApprovalStatus = "Approved", ManagerID = 2 }
                // Add more attendance records as necessary
            };

            ViewBag.AttendanceRecords = attendanceRecords; // Pass data to view
            return View();
        }

        // GET: Admin/CreateAttendance
        public ActionResult CreateAttendance()
        {
            if (!IsAdminAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            // Retrieve list of employees, managers, and projects
            ViewBag.Employees = new List<SelectListItem>
            {
                new SelectListItem { Value = "1", Text = "John Doe" }
                // Add more employees as necessary
            };

            ViewBag.Managers = new List<SelectListItem>
            {
                new SelectListItem { Value = "2", Text = "Jane Smith" }
                // Add more managers as necessary
            };

            ViewBag.Projects = new List<SelectListItem>
            {
                new SelectListItem { Value = "101", Text = "Project A" }
                // Add more projects as necessary
            };

            return View();
        }

        // POST: Admin/CreateAttendance
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateAttendance(FormCollection form)
        {
            if (!IsAdminAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            try
            {
                // Extract form values
                int employeeID = Convert.ToInt32(form["EmployeeID"]);
                int projectID = Convert.ToInt32(form["ProjectID"]);
                DateTime attendanceDate = Convert.ToDateTime(form["AttendanceDate"]);
                string status = form["Status"];
                string approvalStatus = form["ApprovalStatus"] ?? "Pending";
                int managerID = Convert.ToInt32(form["ManagerID"]);

                // Add the new attendance record to the database
                // Example: db.AddAttendanceRecord(employeeID, projectID, attendanceDate, status, approvalStatus, managerID);

                TempData["SuccessMessage"] = "Attendance record created successfully.";
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = "An error occurred while creating the attendance record: " + ex.Message;
            }

            return RedirectToAction("AttendanceDetails");
        }

        // POST: Admin/DeleteAttendance/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteAttendance(int id)
        {
            if (!IsAdminAuthenticated())
            {
                return RedirectToAction("EmployeeLogin");
            }

            try
            {
                // Simulate delete logic here (replace with actual delete logic)
                // Example: db.DeleteAttendanceRecord(id);

                TempData["SuccessMessage"] = "Attendance record deleted successfully.";
            }
            catch (Exception ex)
            {
                TempData["ErrorMessage"] = "An error occurred while deleting the attendance record: " + ex.Message;
            }

            return RedirectToAction("AttendanceDetails");
        }

        // GET: Employee/Logout
        public ActionResult Logout()
        {
            Session["IsLoggedIn"] = null;
            Session["UserRole"] = null;
            return RedirectToAction("EmployeeLogin");
        }

        // Helper method to check if the user is authenticated as an employee
        private bool IsUserAuthenticated()
        {
            return Session["IsLoggedIn"] != null && (bool)Session["IsLoggedIn"] && Session["UserRole"] == "Employee";
        }

        // Helper method to check if the user is authenticated as an admin
        private bool IsAdminAuthenticated()
        {
            return Session["IsLoggedIn"] != null && (bool)Session["IsLoggedIn"] && Session["UserRole"] == "Admin";
        }

        // Simulated method for example purposes
        private bool IsValidUser(string username, string password)
        {
            // Replace with actual credential validation logic
            return username == "employee" && password == "password"; // For Employee role
            // If adding Admin validation, check for different username and password
        }
    }
}


@{
    ViewBag.Title = "Employee Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #000;
            color: #ecf0f1;
            margin: 0;
            padding: 0;
        }

        .navbar {
            background-color: rgba(0, 0, 0, 0.8);
            transition: background-color 0.3s ease-in-out;
        }

            .navbar:hover {
                background-color: rgba(0, 0, 0, 0.9);
            }

        .navbar-brand {
            font-size: 1.8em;
            color: #ffffff !important;
        }

        .sidebar {
            height: 100vh;
            background-color: rgba(0, 0, 0, 0.9);
            padding-top: 30px;
            position: fixed;
            top: 0;
            left: 0;
            width: 250px;
            transition: width 0.3s ease-in-out;
            overflow: hidden;
            overflow-y: auto;
        }

            .sidebar:hover {
                width: 280px;
            }

            .sidebar a {
                color: #ffffff;
                display: block;
                padding: 20px;
                text-decoration: none;
                font-size: 1.2em;
                transition: background-color 0.3s, padding-left 0.3s;
                border-left: 4px solid transparent;
            }

                .sidebar a:hover {
                    background-color: rgba(255, 255, 255, 0.1);
                    padding-left: 25px;
                    border-left: 4px solid #16a085;
                }

            .sidebar .active {
                background-color: #16a085;
                border-left: 4px solid #1abc9c;
            }

        .content {
            margin-left: 270px;
            padding: 30px;
            color: #ecf0f1;
        }

        .card {
            margin-bottom: 30px;
            border: none;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
            background-color: rgba(255, 255, 255, 0.1);
            color: #ecf0f1;
            transition: transform 0.3s ease-in-out, background-color 0.3s, box-shadow 0.3s;
        }

            .card:hover {
                transform: scale(1.05);
                background-color: rgba(255, 255, 255, 0.2);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            }

        .card-title {
            font-size: 1.8em;
        }

        .card-text {
            font-size: 1.2em;
        }

        .btn {
            font-size: 1.2em;
            padding: 0.75em 1.5em;
        }

        .welcome-box {
            background-color: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
        }

            .welcome-box h3 {
                font-size: 2em;
                margin-bottom: 10px;
            }

            .welcome-box p {
                font-size: 1.2em;
            }
    </style>
</head>
<body>
    <div class="sidebar">
        <a href="@Url.Action("EmployeeDashboard", "Employee")" class="active">Dashboard</a>
        <a href="@Url.Action("ApplyLeave", "Employee")">Apply for Leave</a>
        <a href="@Url.Action("SubmitAttendance", "Employee")">Submit Attendance</a>
        <a href="@Url.Action("ViewProjects", "Employee")">View Project Details</a>
        <a href="@Url.Action("Logout", "Employee")">Logout</a>
    </div>

    <div class="content">
        <div class="welcome-box">
            <h3>Welcome to the Employee Dashboard</h3>
            <p>Welcome, @Session["UserName"]</p>
        </div>

        @if (TempData["Message"] != null)
        {
            <div class="alert alert-success">
                @TempData["Message"]
            </div>
        }

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Employee Details</h5>
                <p class="card-text">Name: LeaveMaster</p>
                <p class="card-text">Position: Software Engineer</p>
                <p class="card-text">Department: HealthCare</p>
                <p class="card-text">Email: leavemaster@gmail.com</p>
                <p class="card-text">Phone: 9393939495</p>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Apply for Leave</h5>
                <p class="card-text">Submit your leave requests here.</p>
                <a href="@Url.Action("ApplyLeave", "Employee")" class="btn btn-primary">Apply Leave</a>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Submit Attendance</h5>
                <p class="card-text">Record your attendance here.</p>
                <a href="@Url.Action("SubmitAttendance", "Employee")" class="btn btn-primary">Submit Attendance</a>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h5 class="card-title">View Project Details</h5>
                <p class="card-text">View details related to your current projects.</p>
                <a href="@Url.Action("ViewProjects", "Employee")" class="btn btn-primary">View Projects</a>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
</body>
</html>



@{
        ViewBag.Title = "Apply Leave";
    }

    <h2>Apply Leave</h2>
    <form action="/Employee/ApplyLeave" method="post">
        <div class="form-group">
            <label for="leaveType">Leave Type</label>
            <select id="leaveType" name="leaveType" class="form-control">
                <option value="Sick">Sick Leave</option>
                <option value="Casual">Casual Leave</option>
                <option value="Annual">Annual Leave</option>
            </select>
        </div>
        <div class="form-group">
            <label for="startDate">Start Date</label>
            <input type="date" id="startDate" name="startDate" class="form-control" required />
        </div>
        <div class="form-group">
            <label for="endDate">End Date</label>
            <input type="date" id="endDate" name="endDate" class="form-control" required />
        </div>
        <div class="form-group">
            <label for="reason">Reason</label>
            <textarea id="reason" name="reason" class="form-control" required></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>


@{
    ViewBag.Title = "Leave Details";
}

<h2>Leave Details</h2>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Leave ID</th>
            <th>Employee ID</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Leave Type</th>
            <th>Reason</th>
            <th>Approval Status</th>
            <th>Manager ID</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var leave in ViewBag.LeaveRequests as List<dynamic>)
        {
            <tr>
                <td>@leave.LeaveID</td>
                <td>@leave.EmployeeID</td>
                <td>@leave.StartDate.ToString("d")</td>
                <td>@leave.EndDate.ToString("d")</td>
                <td>@leave.LeaveType</td>
                <td>@leave.Reason</td>
                <td>@leave.ApprovalStatus</td>
                <td>@leave.ManagerID</td>
                <td>
                    @using (Html.BeginForm("DeleteLeave", "Employee", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("id", leave.LeaveID)
                        <input type="submit" value="Delete" class="btn btn-danger btn-sm" />
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<p>
    <a href="@Url.Action("CreateLeave", "Employee")" class="btn btn-primary">Create New Leave Request</a>
</p>


@{
    ViewBag.Title = "Create Leave";
}

<h2>Create Leave</h2>

@using (Html.BeginForm("CreateLeave", "Employee", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div>
        @Html.Label("Employee")
        @Html.DropDownList("EmployeeID", (IEnumerable<SelectListItem>)ViewBag.Employees, "Select Employee", new { @class = "form-control" })
    </div>
    <div>
        @Html.Label("Start Date")
        @Html.TextBox("StartDate", null, new { type = "date", @class = "form-control" })
    </div>
    <div>
        @Html.Label("End Date")
        @Html.TextBox("EndDate", null, new { type = "date", @class = "form-control" })
    </div>
    <div>
        @Html.Label("Leave Type")
        @Html.TextBox("LeaveType", null, new { @class = "form-control" })
    </div>
    <div>
        @Html.Label("Reason")
        @Html.TextArea("Reason", null, new { @class = "form-control" })
    </div>
    <div>
        @Html.Label("Approval Status")
        @Html.TextBox("ApprovalStatus", null, new { @class = "form-control" })
    </div>
    <div>
        @Html.Label("Manager")
        @Html.DropDownList("ManagerID", (IEnumerable<SelectListItem>)ViewBag.Managers, "Select Manager", new { @class = "form-control" })
    </div>
    <div>
        <input type="submit" value="Create Leave Request" class="btn btn-primary" />
    </div>
}



@{
    ViewBag.Title = "Submit Attendance";
}

<h2>Submit Attendance</h2>
<form action="/Employee/SubmitAttendance" method="post">
    <div class="form-group">
        <label for="date">Date</label>
        <input type="date" id="date" name="date" class="form-control" required />
    </div>
    <div class="form-group">
        <label for="status">Status</label>
        <select id="status" name="status" class="form-control">
            <option value="Present">Present</option>
            <option value="Absent">Absent</option>
            <option value="Leave">On Leave</option>
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>


@{
    ViewBag.Title = "Attendance Details";
}

<h2>Attendance Details</h2>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Attendance ID</th>
            <th>Employee ID</th>
            <th>Project ID</th>
            <th>Attendance Date</th>
            <th>Status</th>
            <th>Approval Status</th>
            <th>Manager ID</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var attendance in ViewBag.AttendanceRecords as List<dynamic>)
        {
            <tr>
                <td>@attendance.AttendanceID</td>
                <td>@attendance.EmployeeID</td>
                <td>@attendance.ProjectID</td>
                <td>@attendance.AttendanceDate.ToString("d")</td>
                <td>@attendance.Status</td>
                <td>@attendance.ApprovalStatus</td>
                <td>@attendance.ManagerID</td>
                <td>
                    @using (Html.BeginForm("DeleteAttendance", "Employee", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("id", attendance.AttendanceID)
                        <input type="submit" value="Delete" class="btn btn-danger btn-sm" />
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<p>
    <a href="@Url.Action("CreateAttendance", "Employee")" class="btn btn-primary">Create New Attendance Record</a>
</p>



@{
    ViewBag.Title = "Create Attendance";
}

<h2>Create Attendance</h2>

@using (Html.BeginForm("CreateAttendance", "Employee", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div>
        @Html.Label("Employee")
        @Html.DropDownList("EmployeeID", (IEnumerable<SelectListItem>)ViewBag.Employees, "Select Employee", new { @class = "form-control" })
    </div>
    <div>
        @Html.Label("Project")
        @Html.DropDownList("ProjectID", (IEnumerable<SelectListItem>)ViewBag.Projects, "Select Project", new { @class = "form-control" })
    </div>
    <div>
        @Html.Label("Attendance Date")
        @Html.TextBox("AttendanceDate", null, new { type = "date", @class = "form-control" })
    </div>
    <div>
        @Html.Label("Status")
        @Html.TextBox("Status", null, new { @class = "form-control" })
    </div>
    <div>
        @Html.Label("Approval Status")
        @Html.TextBox("ApprovalStatus", null, new { @class = "form-control" })
    </div>
    <div>
        @Html.Label("Manager")
        @Html.DropDownList("ManagerID", (IEnumerable<SelectListItem>)ViewBag.Managers, "Select Manager", new { @class = "form-control" })
    </div>
    <div>
        <input type="submit" value="Create Attendance Record" class="btn btn-primary" />
    </div>
}

