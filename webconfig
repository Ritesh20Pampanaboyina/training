public class AdminController : Controller
{
    private readonly MyDbContext _context;

    public AdminController(MyDbContext context)
    {
        _context = context;
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult AdminLogin(string username, string password)
    {
        var admin = _context.Admins.SingleOrDefault(a => a.Username == username && a.Password == password);
        
        if (admin != null)
        {
            Session["AdminID"] = admin.Id;
            return RedirectToAction("AdminDashboard");
        }
        
        ModelState.AddModelError("", "Invalid login attempt.");
        return View();
    }
}



using Moq;
using NUnit.Framework;
using MyMvcApp.Controllers;
using MyMvcApp.Models;
using System.Linq;
using System.Web.Mvc;

namespace MyMvcApp.Tests.Controllers
{
    [TestFixture]
    public class AdminControllerTests
    {
        private Mock<MyDbContext> _mockContext;
        private AdminController _controller;

        [SetUp]
        public void SetUp()
        {
            _mockContext = new Mock<MyDbContext>();
            _controller = new AdminController(_mockContext.Object);
        }

        [Test]
        public void AdminLogin_ValidCredentials_ShouldRedirectToAdminDashboard()
        {
            // Arrange
            var admins = new List<Admin>
            {
                new Admin { Id = 1, Username = "admin", Password = "password" }
            }.AsQueryable();

            var mockSet = new Mock<DbSet<Admin>>();
            mockSet.As<IQueryable<Admin>>().Setup(m => m.Provider).Returns(admins.Provider);
            mockSet.As<IQueryable<Admin>>().Setup(m => m.Expression).Returns(admins.Expression);
            mockSet.As<IQueryable<Admin>>().Setup(m => m.ElementType).Returns(admins.ElementType);
            mockSet.As<IQueryable<Admin>>().Setup(m => m.GetEnumerator()).Returns(admins.GetEnumerator());

            _mockContext.Setup(c => c.Admins).Returns(mockSet.Object);

            // Act
            var result = _controller.AdminLogin("admin", "password") as RedirectToRouteResult;

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual("AdminDashboard", result.RouteValues["action"]);
        }

        [Test]
        public void AdminLogin_InvalidCredentials_ShouldReturnLoginViewWithError()
        {
            // Arrange
            var admins = new List<Admin>().AsQueryable();

            var mockSet = new Mock<DbSet<Admin>>();
            mockSet.As<IQueryable<Admin>>().Setup(m => m.Provider).Returns(admins.Provider);
            mockSet.As<IQueryable<Admin>>().Setup(m => m.Expression).Returns(admins.Expression);
            mockSet.As<IQueryable<Admin>>().Setup(m => m.ElementType).Returns(admins.ElementType);
            mockSet.As<IQueryable<Admin>>().Setup(m => m.GetEnumerator()).Returns(admins.GetEnumerator());

            _mockContext.Setup(c => c.Admins).Returns(mockSet.Object);

            // Act
            var result = _controller.AdminLogin("admin", "wrongpassword") as ViewResult;

            // Assert
            Assert.IsNotNull(result);
            Assert.AreEqual("", result.ViewName); // Should return the same view
            Assert.AreEqual(1, _controller.ModelState.Count);
        }
    }
}

