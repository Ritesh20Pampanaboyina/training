Parser Error
Description: An error occurred during the parsing of a resource required to service this request. Please review the following specific parse error details and modify your source file appropriately.

Parser Error Message: Unexpected "if" keyword after "@" character.  Once inside code, you do not need to prefix constructs like "if" with "@".


Source Error:


Line 91:                 @Html.Password("password", null, new { @class = "form-control", required = "required" })
Line 92:             </div>
Line 93:             @if (ViewBag.ErrorMessage != null)
Line 94:             {
Line 95:                 <div class="error-message">

Source File: /Views/Admin/AdminLogin.cshtml    Line: 93

Version Information: Microsoft .NET Framework Version:4.0.30319; ASP.NET Version:4.8.4712.0




using System;
using System.Collections.Generic;
using System.Web.Mvc;

namespace ALMSystem2.Controllers
{
    public class AdminController : Controller
    {
        // GET: Admin/Login
        public ActionResult AdminLogin()
        {
            if (Session["User"] != null) // Check if the user is already authenticated
            {
                return RedirectToAction("AdminDashboard");
            }
            return View();
        }

        // POST: Admin/Login
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AdminLogin(string username, string password)
        {
            if (IsValidAdmin(username, password))
            {
                Session["User"] = username; // Store user information in session
                return RedirectToAction("AdminDashboard");
            }

            // Add model error to be displayed on the login page
            ModelState.AddModelError("", "Invalid login attempt.");
            return View();
        }

        // GET: Admin/Dashboard
        public ActionResult AdminDashboard()
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }
            return View();
        }

        // GET: Admin/Logout
        public ActionResult Logout()
        {
            Session.Clear(); // Clear all session data
            Session.Abandon(); // End the session
            return RedirectToAction("AdminLogin");
        }

        // GET: Admin/EmployeeDetails
        public ActionResult EmployeeDetails()
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            var employees = new List<object>
            {
                new { EmployeeID = 1, EmployeeName = "John Doe", Email = "johndoe@example.com", Phone = "123-456-7890", HireDate = DateTime.Now.AddYears(-5), RoleID = 1, ManagerID = 2, ProjectID = 1, LeaveBalance = 10, No_of_leave = 5, Emp_status = "Active" }
                // Add more employees as necessary
            };

            ViewBag.Employees = employees; // Pass data to view
            return View();
        }

        // GET: Admin/CreateNewEmployee
        public ActionResult CreateNewEmployee()
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }
            return View();
        }

        // POST: Admin/CreateNewEmployee
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateNewEmployee(FormCollection form)
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            // Extract form values
            string employeeName = form["EmployeeName"];
            string email = form["Email"];
            string phone = form["Phone"];
            DateTime hireDate = Convert.ToDateTime(form["HireDate"]);
            int roleID = Convert.ToInt32(form["RoleID"]);
            int managerID = Convert.ToInt32(form["ManagerID"]);
            int projectID = Convert.ToInt32(form["ProjectID"]);
            int leaveBalance = Convert.ToInt32(form["LeaveBalance"]);
            int no_of_leave = Convert.ToInt32(form["No_of_leave"]);
            string emp_status = form["Emp_status"];

            // Add the new employee to the database (replace with actual data insertion logic)
            // Example: db.AddEmployee(employeeName, email, phone, hireDate, roleID, managerID, projectID, leaveBalance, no_of_leave, emp_status);

            return RedirectToAction("EmployeeDetails");
        }

        // GET: Admin/EditEmployee/1
        public ActionResult EditEmployee(int id)
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            // Fetch the employee from the database using the id (replace with actual data retrieval logic)
            var employee = new
            {
                EmployeeID = id,
                EmployeeName = "John Doe",
                Email = "johndoe@example.com",
                Phone = "123-456-7890",
                HireDate = DateTime.Now.AddYears(-5),
                RoleID = 1,
                ManagerID = 2,
                ProjectID = 1,
                LeaveBalance = 10,
                No_of_leave = 5,
                Emp_status = "Active"
            };

            // Pass the data to the view
            ViewBag.Employee = employee;
            return View();
        }

        // POST: Admin/EditEmployee/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditEmployee(int id, FormCollection form)
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            // Extract form values (replace with actual logic)
            string employeeName = form["EmployeeName"];
            string email = form["Email"];
            string phone = form["Phone"];
            DateTime hireDate = Convert.ToDateTime(form["HireDate"]);
            int roleID = Convert.ToInt32(form["RoleID"]);
            int managerID = Convert.ToInt32(form["ManagerID"]);
            int projectID = Convert.ToInt32(form["ProjectID"]);
            int leaveBalance = Convert.ToInt32(form["LeaveBalance"]);
            int no_of_leave = Convert.ToInt32(form["No_of_leave"]);
            string emp_status = form["Emp_status"];

            // Update employee in the database (replace with actual data update logic)

            return RedirectToAction("EmployeeDetails");
        }

        // POST: Admin/DeleteEmployee/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteEmployee(int id)
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            // Simulate delete logic here (replace with actual delete logic)

            return RedirectToAction("EmployeeDetails");
        }

        // GET: Admin/ProjectDetails
        public ActionResult ProjectDetails()
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            var projects = new List<object>
            {
                new { ProjectID = 1, ProjectName = "Project Alpha", StartDate = DateTime.Now.AddMonths(-6), EndDate = DateTime.Now.AddMonths(6), Status = "Active" }
                // Add more projects as necessary
            };

            ViewBag.Projects = projects; // Pass data to view
            return View();
        }

        // GET: Admin/CreateNewProject
        public ActionResult CreateNewProject()
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }
            return View();
        }

        // POST: Admin/CreateNewProject
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult CreateNewProject(FormCollection form)
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            // Extract form values
            string projectName = form["ProjectName"];
            DateTime startDate = Convert.ToDateTime(form["StartDate"]);
            DateTime endDate = Convert.ToDateTime(form["EndDate"]);
            string status = form["Status"];

            // Add the new project to the database (replace with actual data insertion logic)
            // Example: db.AddProject(projectName, startDate, endDate, status);

            return RedirectToAction("ProjectDetails");
        }

        // GET: Admin/EditProject/1
        public ActionResult EditProject(int id)
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            // Fetch the project from the database using the id (replace with actual data retrieval logic)
            var project = new
            {
                ProjectID = id,
                ProjectName = "Project Alpha",
                StartDate = DateTime.Now.AddMonths(-6),
                EndDate = DateTime.Now.AddMonths(6),
                Status = "Active"
            };

            // Pass the data to the view
            ViewBag.Project = project;
            return View();
        }

        // POST: Admin/EditProject/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditProject(int id, FormCollection form)
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            // Extract form values (replace with actual logic)
            string projectName = form["ProjectName"];
            DateTime startDate = Convert.ToDateTime(form["StartDate"]);
            DateTime endDate = Convert.ToDateTime(form["EndDate"]);
            string status = form["Status"];

            // Update project in the database (replace with actual data update logic)

            return RedirectToAction("ProjectDetails");
        }

        // POST: Admin/DeleteProject/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteProject(int id)
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            // Simulate delete logic here (replace with actual delete logic)

            return RedirectToAction("ProjectDetails");
        }

        // GET: Admin/AttendanceRequests
        public ActionResult AttendanceRequests()
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            var requests = new List<object>
            {
                new { RequestID = 1, EmployeeName = "John Doe", RequestDate = DateTime.Now.AddDays(-1), Status = "Pending" }
                // Add more requests as necessary
            };

            ViewBag.Requests = requests; // Pass data to view
            return View();
        }

        // POST: Admin/ApproveAttendanceRequest/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ApproveAttendanceRequest(int id)
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            // Simulate approval logic here (replace with actual approval logic)

            return RedirectToAction("AttendanceRequests");
        }

        // POST: Admin/RejectAttendanceRequest/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RejectAttendanceRequest(int id)
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            // Simulate rejection logic here (replace with actual rejection logic)

            return RedirectToAction("AttendanceRequests");
        }

        // GET: Admin/LeaveRequests
        public ActionResult LeaveRequests()
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            var requests = new List<object>
            {
                new { RequestID = 1, EmployeeName = "Jane Doe", RequestDate = DateTime.Now.AddDays(-2), Status = "Pending" }
                // Add more requests as necessary
            };

            ViewBag.Requests = requests; // Pass data to view
            return View();
        }

        // POST: Admin/ApproveLeaveRequest/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ApproveLeaveRequest(int id)
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            // Simulate approval logic here (replace with actual approval logic)

            return RedirectToAction("LeaveRequests");
        }

        // POST: Admin/RejectLeaveRequest/1
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult RejectLeaveRequest(int id)
        {
            if (Session["User"] == null) // Check if the user is authenticated
            {
                return RedirectToAction("AdminLogin");
            }

            // Simulate rejection logic here (replace with actual rejection logic)

            return RedirectToAction("LeaveRequests");
        }

        // Helper method to validate admin credentials
        private bool IsValidAdmin(string username, string password)
        {
            // Replace with actual credential validation logic
            return username == "admin" && password == "password";
        }
    }
}






@{
    Layout = null; // or set to your layout file if you have one
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Login</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            background: linear-gradient(to right, #6a11cb, #2575fc);
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
        }

        .login-container {
            background: #fff;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 400px;
            transform: translateY(0);
            opacity: 1;
            transition: transform 0.5s ease-out, opacity 0.5s ease-out;
        }

        .login-container.hidden {
            transform: translateY(-50%);
            opacity: 0;
        }

        .login-container h2 {
            margin-bottom: 1rem;
            font-family: 'Arial', sans-serif;
            color: #333;
        }

        .form-control {
            border-radius: 5px;
            border: 1px solid #ddd;
            transition: border-color 0.3s;
        }

        .form-control:focus {
            border-color: #2575fc;
            box-shadow: 0 0 5px rgba(37, 117, 252, 0.5);
        }

        .btn-primary {
            background: #2575fc;
            border: none;
            border-radius: 5px;
            padding: 0.75rem 1.5rem;
            font-size: 1.5rem;
            transition: background 0.3s, transform 0.3s;
        }

        .btn-primary:hover {
            background: #1d64d1;
        }

        .btn-primary:active {
            transform: scale(0.98);
        }

        .error-message {
            color: red;
            margin-top: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <h2>Admin Login</h2>
        @using (Html.BeginForm("AdminLogin", "Admin", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <div class="form-group">
                @Html.Label("username")
                @Html.TextBox("username", null, new { @class = "form-control", required = "required" })
            </div>
            <div class="form-group">
                @Html.Label("password")
                @Html.Password("password", null, new { @class = "form-control", required = "required" })
            </div>
            @if (ViewBag.ErrorMessage != null)
            {
                <div class="error-message">
                    @ViewBag.ErrorMessage
                </div>
            }
            <button type="submit" class="btn btn-primary">Login</button>
        }
    </div>
</body>
</html>
